package com.example.qu.gaode;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.SlidingDrawer;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.alibaba.fastjson.JSONObject;
import com.amap.api.location.CoordinateConverter;
import com.amap.api.location.DPoint;
import com.lidroid.xutils.http.RequestParams;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class LocationServerActivity extends BaseActivity implements LoadHttpUtils.GetListener {

    OBDMapView mMapView = null;
    private SlidingDrawer mDrawer;
    private ImageView imageButton, imgPlay, imgStop;
    private TextView startTime1, overTime1, runTime1, runMileage1, avgSpeed1, highestSpeed1, mean1, startLocation, startLocation1, terminationLocation1;
    private FrameLayout flayout;
    private Spinner spinnerStatic;
    private boolean isPlay = true;
    TravelDetailItemEntity startLatLng;
    TravelDetailItemEntity endlaLatLng;
    CoordinateConverter converter;
    private ArrayAdapter adapter2;//播放速度
    private int id;//用来判断查询轨迹的方式
    String starttime, endtime;
    final List<DPoint> pts = new ArrayList<DPoint>();
    private TraceRecord traceRecord = null;//用于接收传递过来的对象(进行服务器请求的参数传递)

    RequestParams params = new RequestParams();
    LoadHttpUtils lhttputil = new LoadHttpUtils(this);

    private int[] xingshi = new int[]{R.mipmap.car_green_up, R.mipmap.car_green_down, R.mipmap.car_green_left, R.mipmap.car_green_right, R.mipmap.car_green_left_up, R.mipmap.car_green_up_right, R.mipmap.car_green_down_left, R.mipmap.car_green_right_down};
    private int[] tingche = new int[]{R.mipmap.car_red_up, R.mipmap.car_red_down, R.mipmap.car_red_left, R.mipmap.car_red_right, R.mipmap.car_red_left_up, R.mipmap.car_red_up_right, R.mipmap.car_red_down_left, R.mipmap.car_red_right_down};
    private int[] guzhang = new int[]{R.mipmap.car_orange_up, R.mipmap.car_orange_down, R.mipmap.car_orange_left, R.mipmap.car_orange_right, R.mipmap.car_orange_left_up, R.mipmap.car_orange_up_right, R.mipmap.car_orange_down_left, R.mipmap.car_orange_right_down};
    private TimeCounts timeCount;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        View view = View.inflate(this, R.layout.activity_location_server, null);
        mDrawer = (SlidingDrawer) view.findViewById(R.id.slidingdrawer);
        imageButton = (ImageView) view.findViewById(R.id.handle);
        startTime1 = (TextView) view.findViewById(R.id.startTime1);
        overTime1 = (TextView) view.findViewById(R.id.overTime1);
        runTime1 = (TextView) view.findViewById(R.id.runTime1);
        runMileage1 = (TextView) view.findViewById(R.id.runMileage1);
        highestSpeed1 = (TextView) view.findViewById(R.id.highestSpeed1);
        mean1 = (TextView) view.findViewById(R.id.mean1);
        startLocation1 = (TextView) view.findViewById(R.id.startLocation1);
        startLocation = (TextView) view.findViewById(R.id.startLocation);


        flayout = (FrameLayout) view.findViewById(R.id.contentplay);
        imgPlay = (ImageView) view.findViewById(R.id.imagePlay);
        imgStop = (ImageView) view.findViewById(R.id.imageStop);
        spinnerStatic = (Spinner) view.findViewById(R.id.spinnerStatic);
        mMapView = (OBDMapView) view.findViewById(R.id.bmapView);
        mMapView.setIconGone();
        fl_content.addView(view);

        adapter2 = ArrayAdapter.createFromResource(this, R.array.cityArray, android.R.layout.simple_spinner_item);
        adapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinnerStatic.setAdapter(adapter2);

        imgPlay.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                RunPlay();//执行播放
            }
        });
        imgStop.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                RunStop();//停止
            }
        });

        mDrawer.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener() {
            public void onDrawerOpened() {
                setMargins(flayout, mDrawer.getHeight());
                imageButton.setImageResource(R.drawable.gps_hide);
            }
        });
        mDrawer.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener() {
            public void onDrawerClosed() {
                setMargins(flayout, imageButton.getHeight());
                imageButton.setImageResource(R.drawable.gps_detail);
            }
        });

        Intent intent = getIntent();
        id = intent.getIntExtra("id", 0);
        if (id != 0) {
            traceRecord = (TraceRecord) intent.getSerializableExtra("TraceRecord");//intent数据传递  接收端
        } else {
            starttime = intent.getStringExtra("startTime");
            endtime = intent.getStringExtra("endTime");
        }
        getCoordData();
        mMapView.onCreate(savedInstanceState);
    }


    private boolean ispause = false;
    private boolean isstop = false;
    private boolean isjiekou = false;
    private int num = 0;

    //运行按钮
    private void RunPlay() {
        if (isjiekou) {
            if (!isstop) {
                if (spinnerStatic.getSelectedItem().toString().equals("正常速度")) {
                    timeCount = new TimeCounts(pts.size() * 1000, 200);
                } else if (spinnerStatic.getSelectedItem().toString().equals("2X速度")) {
                    timeCount = new TimeCounts(pts.size() * 1000, 100);
                } else if (spinnerStatic.getSelectedItem().toString().equals("4X速度")) {
                    timeCount = new TimeCounts(pts.size() * 1000, 50);
                }
                num = 0;
                isstop = true;
            }
            if (isPlay) {//运行

                isPlay = false;
                if (!ispause) {//第一次运行
                    timeCount.start();
                    imgPlay.setImageResource(R.drawable.play01);
                } else {//第二次运行暂停后的运行
                    ispause = false;
                    timeCount.resume();
                    imgPlay.setImageResource(R.drawable.play01);
                }
            } else {//暂停
                isPlay = true;
                ispause = true;
                timeCount.pause();
                imgPlay.setImageResource(R.drawable.play02);
            }
        }
    }

    //停止按钮
    private void RunStop() {
        timeCount.cancel();
        PlayBackStop();
    }

    class TimeCounts extends AdvancedCountdownTimer {

        public TimeCounts(long millisInFuture, long countDownInterval) {
            super(millisInFuture, countDownInterval);// 参数依次为总时长,和计时的时间间隔
        }

        @Override
        public void onTick(long millisUntilFinished, int i) { //倒计时未完成
            if (num != pts.size()) {
                mMapView.drivingRoute(pts, num);
                num++;
            } else {
                PlayBackStop();
                timeCount.cancel();
            }
        }

        @Override
        public void onFinish() { //倒计时完成
            PlayBackStop();
        }
    }

    private void PlayBackStop() {

        isPlay = true;
        ispause = false;
        isstop = false;
        imgPlay.setImageResource(R.drawable.play02);
        mMapView.drivingRouteStop(pts, num);

    }

    private void getCoordData() {

        converter = new CoordinateConverter(this);
        converter.from(CoordinateConverter.CoordType.GPS);
        SharedPreferences sp = getSharedPreferences("login", 0);
        String customerId = sp.getString("id", "");
        params.addQueryStringParameter("customerId", customerId);
        if (id != 0) { //根据轨迹列表id
            params.addQueryStringParameter("startTime", traceRecord.getStartTime());
            params.addQueryStringParameter("endTime", traceRecord.getEndTime());
            params.addQueryStringParameter("carPassedTime", traceRecord.getCarPassedTime());
            params.addQueryStringParameter("km", traceRecord.getKm().toString());
            params.addQueryStringParameter("avgSpeed", traceRecord.getAvgSpeed().toString());
            params.addQueryStringParameter("avgOilSpend", traceRecord.getAvgOilSpend().toString());
            params.addQueryStringParameter("startLocate", traceRecord.getStartLocate());
            params.addQueryStringParameter("endLocate", traceRecord.getEndLocate());
            params.addQueryStringParameter("traceId", traceRecord.getTraceId());
            lhttputil.Post(AppConstants.TRACEMAP, params, 0);
        } else {//根据时间查询轨迹地图
            params.addQueryStringParameter("startTime", starttime);
            params.addQueryStringParameter("endTime", endtime);
            lhttputil.Post(AppConstants.SEARCHTRACKBYTIMEFORAPP, params, 1);
        }

    }

    @Override
    public void getData(String str, int retrunType) {
        switch (retrunType) {
            case 0://根据轨迹列表id
                str = "{\"startTime\":\"2016-05-12 09:44:34\",\"startLocate\":\"山东省青岛市市北区河西街道重庆南路159号;距蚌埠路9号(蚌埠路与合肥路交汇处)青岛欣德远景创业中心南225米; \",\"avgSpeed\":\"0\",\"coor\":\"120.384817,36.122117;120.384800,36.122133;120.384117,36.121967;120.384100,36.121950;120.384117,36.121933;120.384133,36.121933;120.384133,36.121933;120.384117,36.121933;120.384117,36.121933;120.384117,36.121917;120.384123,36.121930;120.384162,36.121943;120.383083,36.122433;120.383100,36.122450;120.383083,36.122417;120.383083,36.122417;120.383100,36.122417;120.383117,36.122433;120.383100,36.122417;120.383083,36.122400;120.383085,36.122405;120.383085,36.122405;120.383062,36.122387;120.382880,36.122285;120.382800,36.122283;120.382867,36.122300;120.382883,36.122283;120.382683,36.122550;120.382783,36.122650;120.382983,36.122850;120.384383,36.124200;120.385167,36.124883;120.385517,36.124883;120.385550,36.124867;120.386617,36.124317;120.386800,36.124217;120.387533,36.123817;120.388133,36.123517;120.389217,36.122983;120.389533,36.122783;120.389550,36.122750;120.389567,36.122417;120.389550,36.122167;120.389517,36.121300;120.389450,36.119850;120.389467,36.119333;120.389533,36.119267;120.390300,36.119067;120.392483,36.118517;120.392642,36.118473;120.394900,36.117750;120.395033,36.117667;120.395017,36.117533;120.394883,36.117283;120.394750,36.117133;120.393850,36.116033;120.391783,36.113450;120.391317,36.112900;120.389400,36.110700;120.388450,36.109850;120.387800,36.109317;120.387800,36.109317;120.387717,36.108717;120.387917,36.108300;120.388017,36.108150;120.388083,36.108050;120.388467,36.107517;120.389117,36.106800;120.389117,36.106800;120.389483,36.106467;120.389817,36.106250;120.389950,36.106183;120.392133,36.104783;120.392475,36.104463;120.392475,36.104463;120.393012,36.103757;120.393467,36.102533;120.393500,36.102233;120.393567,36.101700;120.393617,36.101150;120.393767,36.099717;120.393833,36.099033;120.394017,36.097117;120.393933,36.094917;120.393333,36.094767;120.392983,36.095267;120.393133,36.096017;120.393283,36.096233;120.393467,36.096383;120.393717,36.096500;120.396017,36.097683;120.398333,36.098983;120.398950,36.099333;120.400300,36.099950;120.400533,36.099733;120.400567,36.099700;120.400683,36.099700;120.400800,36.099767;120.401350,36.099783;120.401517,36.099567;120.401450,36.099217;120.401475,36.099207;120.401517,36.099200;120.401583,36.099367;120.401400,36.099650;120.401267,36.099817;120.401283,36.099817;120.401267,36.099817;120.401283,36.099800;120.401267,36.099817;120.400800,36.099667;120.400383,36.100067;120.400500,36.100133;120.400833,36.100333;120.402533,36.101350;120.404383,36.102433;120.404500,36.102500;120.404517,36.102508;120.404550,36.102483;120.404750,36.102567;120.405017,36.102717;120.405117,36.102783;120.405967,36.103267;120.407283,36.103933;120.407500,36.104017;120.407650,36.104083;120.407983,36.104217;120.408450,36.104350;120.408533,36.104367;120.409383,36.104550;120.409817,36.104650;120.411450,36.104900;120.412267,36.105017;120.413233,36.105167;120.413450,36.105200;120.415517,36.105500;120.416500,36.105667;120.416533,36.105700;120.416517,36.105700;120.416520,36.105708;120.416517,36.105700;120.417183,36.105800;120.417283,36.105817;120.419033,36.106083;120.419583,36.106167;120.421633,36.106733;120.421900,36.106867;120.422367,36.107100;120.422450,36.107133;120.423733,36.107917;120.424950,36.108617;120.425867,36.109083;120.427083,36.109583;120.427233,36.109650;120.427200,36.109650;120.427200,36.109667;120.427267,36.109667;120.427917,36.109950;120.428283,36.110117;120.428733,36.110300;120.428827,36.110338;120.429150,36.110450;120.429150,36.110450;120.429133,36.110450;120.429133,36.110450;120.429150,36.110433;120.429517,36.110550;120.430200,36.110817;120.430333,36.110883;120.430400,36.110917;120.430667,36.111033;120.430950,36.111150;120.432167,36.111683;120.434683,36.112717;120.436733,36.113433;120.437667,36.113367;120.440333,36.112883;120.440600,36.112733;120.440667,36.112667;120.440783,36.112567;120.441000,36.112383;120.441057,36.112332;120.441117,36.112283;120.441167,36.112283;120.441317,36.112000;120.441617,36.111733;120.442067,36.111333;120.442533,36.110850;120.442700,36.110733;120.442733,36.110500;120.442600,36.110383;120.442550,36.110417;120.442602,36.110365;120.442600,36.110333;120.442567,36.110300;120.442700,36.110167;120.442767,36.110133;120.443233,36.109767;120.443450,36.109617;120.444233,36.108917;120.444733,36.108483;120.446798,36.106465;120.446783,36.106450;120.447017,36.106233;120.449183,36.104017;120.449583,36.103667;120.449600,36.103683;120.449617,36.103700;120.449633,36.103717;120.449633,36.103717;120.449817,36.103533;120.449933,36.103483;120.450367,36.103467;120.450800,36.103617;120.451433,36.103883;120.451550,36.103933;120.452233,36.104200;120.452517,36.104283;120.453383,36.104583;120.453490,36.104615;120.453483,36.104600;120.453750,36.104717;120.453750,36.104700;120.453750,36.104700;120.454133,36.104850;120.454517,36.105000;120.454600,36.105033;120.454700,36.105050;120.455017,36.105167;120.455050,36.105150;120.455050,36.105150;120.455050,36.105167;120.455100,36.105183;120.455583,36.105383;120.457167,36.105983;120.457883,36.106250;120.458267,36.106367;120.458383,36.106400;120.459900,36.107000;120.461033,36.107350;120.461250,36.107350;120.461617,36.107017;120.461667,36.106917;120.461717,36.106800;120.462173,36.105842;120.462300,36.105550;120.462483,36.105067;120.462500,36.105017;120.462500,36.104983;120.462650,36.104867;120.462917,36.104900;120.463050,36.104933;120.463550,36.105000;120.464000,36.105167;120.464317,36.105250;120.464467,36.105283;120.464533,36.105317;120.464567,36.105333;120.464683,36.105367;120.464833,36.105417;120.465345,36.105567;120.465500,36.105600;120.465667,36.105633;120.466017,36.105733;120.466083,36.105783;120.466133,36.105767;120.466467,36.105867;120.466633,36.105933;120.466667,36.105950;120.466817,36.105967;120.466850,36.105983;120.466967,36.106017;120.466983,36.106017;120.467048,36.106033;120.467033,36.106033;120.467033,36.106017;120.467033,36.106033;120.467033,36.106033;120.467233,36.106067;120.467233,36.106050;120.467233,36.106067;120.467217,36.106067;120.467250,36.106050;120.467250,36.106050;120.467267,36.106033;120.467267,36.106033;120.467267,36.106048;120.467267,36.106050;120.467267,36.106050;120.467267,36.106050;120.467267,36.106050;120.467250,36.106050;120.467250,36.106050;120.467317,36.106100;120.467483,36.106067;120.467500,36.106050;120.467500,36.106050;120.467517,36.105817;120.467500,36.105567;120.467167,36.105450;120.467175,36.105463;120.467167,36.105450;120.467167,36.105450;120.467167,36.105450;120.467167,36.105467;120.467168,36.105468;120.467167,36.105467;120.467158,36.105480;120.467450,36.105500;120.467433,36.106067;120.467383,36.106150;120.467117,36.106333;120.467017,36.106567;120.466367,36.108017;120.466133,36.108433;120.465917,36.108833;120.465800,36.109000;120.465547,36.109028;120.465367,36.108983;120.465067,36.108900;120.464783,36.108750;120.464333,36.108450;120.462250,36.107833;120.462050,36.107833;120.461550,36.107583;120.461200,36.107350;120.460900,36.107267;120.460700,36.107217;120.460417,36.107133;120.460333,36.107117;120.459733,36.106967;120.458950,36.106733;120.458850,36.106600;120.458683,36.106583;120.457833,36.106183;120.457483,36.106050;120.456667,36.105683;120.456167,36.105633;120.455200,36.105333;120.454650,36.105167;120.453850,36.104933;120.453515,36.104783;120.452733,36.104433;120.451500,36.104150;120.451400,36.104117;120.449967,36.103683;120.449667,36.103817;120.449300,36.104150;120.449300,36.104150;120.449150,36.104283;120.448717,36.104750;120.448017,36.105483;120.447500,36.106017;120.447417,36.106100;120.446683,36.106883;120.445517,36.108033;120.444717,36.108850;120.444050,36.109517;120.442133,36.111500;120.440233,36.113483;120.439683,36.114033;120.437800,36.115617;120.435200,36.117617;120.434717,36.118000;120.434197,36.118412;120.432533,36.119783;120.431300,36.120850;120.431033,36.121083;120.430083,36.122150;120.429517,36.122867;120.427933,36.125317;120.427900,36.125450;120.428233,36.125883;120.428783,36.125750;120.428883,36.125483;120.428750,36.125283;120.428267,36.125083;120.428067,36.125067;120.427600,36.125100;120.426283,36.125300;120.425200,36.125667;120.423667,36.126517;120.422600,36.127533;120.422300,36.127917;120.419867,36.131600;120.419083,36.132200;120.417183,36.133100;120.415317,36.133467;120.412733,36.133783;120.410600,36.134083;120.406317,36.134717;120.406117,36.134767;120.403650,36.135750;120.403100,36.136067;120.402138,36.136790;120.401650,36.137217;120.401017,36.137950;120.400950,36.138067;120.399833,36.140083;120.398750,36.141350;120.398600,36.141100;120.398433,36.141033;120.398017,36.140867;120.397850,36.140667;120.397400,36.140283;120.396617,36.139383;120.395983,36.138250;120.395900,36.138100;120.394000,36.134850;120.393683,36.134350;120.392433,36.132317;120.392217,36.132083;120.391867,36.131650;120.391867,36.131650;120.390017,36.129883;120.389617,36.129500;120.388033,36.128017;120.388033,36.128017;120.387900,36.127783;120.387767,36.127567;120.387878,36.127410;120.388117,36.127267;120.388300,36.127167;120.389183,36.126633;120.390300,36.125983;120.390900,36.125650;120.391717,36.125133;120.391717,36.125067;120.391417,36.124750;120.391350,36.124683;120.390650,36.123950;120.389650,36.122883;120.389600,36.122800;120.389583,36.122683;120.389500,36.121933;120.389517,36.121833;120.389417,36.120567;120.389333,36.119467;120.389000,36.119400;120.388750,36.119417;120.388633,36.119417;120.388517,36.119417;120.386583,36.119417;120.382940,36.122485;120.382950,36.122467;120.382900,36.122467;120.382900,36.122467;120.382900,36.122467;120.382883,36.122467;120.382898,36.122477;120.382883,36.122467;120.382892,36.122485\",\"avgOilSpend\":\"0.00\",\"endLocate\":\"山东省青岛市市北区河西街道重庆南路155号;距重庆南路178号青岛市殡葬管理所西北162米; \",\"carPassedTime\":\"00小时00分钟00秒\",\"highestSpeed\":\"89.0\",\"endTime\":\"2016-05-12 14:29:42\",\"km\":\"40.67\"}";
                pts.clear();
                Map<String, Object> result = JsonUtil.parseObject(str);
                ArrayList<TravelDetailItemEntity> list_all = new ArrayList<TravelDetailItemEntity>(); //mDBManager
                list_all = addlist(list_all, result.get("coor").toString());//加载坐标数据
                if (TextUtils.isEmpty(result.get("startTime").toString())) {
                    Toast.makeText(LocationServerActivity.this, "今日暂无轨迹数据!", Toast.LENGTH_SHORT).show();
                    return;
                }
                for (int j = 0; j < list_all.size(); j++) {
                    TravelDetailItemEntity item = list_all.get(j);
                    double posWei = Double.valueOf(item.getPosWei());
                    double posJing = Double.valueOf(item.getPosJing());
                    DPoint latLng = new DPoint(posJing, posWei);
//                    LatLng latLng = new LatLng(posJing, posWei);
                    if (j == 0) {
                        startLatLng = item;
                    } else if (j == list_all.size() - 1) {
                        endlaLatLng = item;
                    }
                    //坐标转换
                    try {
                        pts.add(converter.coord(latLng).convert());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                //地图绘制方法
                mMapView.drivingRoute(pts);

                //从服务器端获取数据 显示到页面
                startTime1.setText("" + result.get("startTime"));
                if (!result.get("endTime").toString().equals("00小时00分钟00秒")) {
                    overTime1.setText("" + result.get("endTime"));
                } else {
                    overTime1.setText("-");
                }
                runTime1.setText("" + result.get("carPassedTime"));
                runMileage1.setText("" + result.get("km") + "公里");
                highestSpeed1.setText("" + result.get("highestSpeed") + "公里/小时");
                mean1.setText("" + result.get("avgOilSpend") + "升/百公里");
                startLocation1.setText("" + traceRecord.getEndLocate().split(";")[0]);
                startLocation.setText("" + traceRecord.getStartLocate().split(";")[0]);
                isjiekou = true;
                break;
            case 1://根据时间查询轨迹地图listAll
                str = "{\"startTime\":\"2016-05-12 09:44:34\",\"startLocate\":\"山东省青岛市市北区河西街道重庆南路159号;距蚌埠路9号(蚌埠路与合肥路交汇处)青岛欣德远景创业中心南225米; \",\"avgSpeed\":\"0\",\"coor\":\"120.384817,36.122117;120.384800,36.122133;120.384117,36.121967;120.384100,36.121950;120.384117,36.121933;120.384133,36.121933;120.384133,36.121933;120.384117,36.121933;120.384117,36.121933;120.384117,36.121917;120.384123,36.121930;120.384162,36.121943;120.383083,36.122433;120.383100,36.122450;120.383083,36.122417;120.383083,36.122417;120.383100,36.122417;120.383117,36.122433;120.383100,36.122417;120.383083,36.122400;120.383085,36.122405;120.383085,36.122405;120.383062,36.122387;120.382880,36.122285;120.382800,36.122283;120.382867,36.122300;120.382883,36.122283;120.382683,36.122550;120.382783,36.122650;120.382983,36.122850;120.384383,36.124200;120.385167,36.124883;120.385517,36.124883;120.385550,36.124867;120.386617,36.124317;120.386800,36.124217;120.387533,36.123817;120.388133,36.123517;120.389217,36.122983;120.389533,36.122783;120.389550,36.122750;120.389567,36.122417;120.389550,36.122167;120.389517,36.121300;120.389450,36.119850;120.389467,36.119333;120.389533,36.119267;120.390300,36.119067;120.392483,36.118517;120.392642,36.118473;120.394900,36.117750;120.395033,36.117667;120.395017,36.117533;120.394883,36.117283;120.394750,36.117133;120.393850,36.116033;120.391783,36.113450;120.391317,36.112900;120.389400,36.110700;120.388450,36.109850;120.387800,36.109317;120.387800,36.109317;120.387717,36.108717;120.387917,36.108300;120.388017,36.108150;120.388083,36.108050;120.388467,36.107517;120.389117,36.106800;120.389117,36.106800;120.389483,36.106467;120.389817,36.106250;120.389950,36.106183;120.392133,36.104783;120.392475,36.104463;120.392475,36.104463;120.393012,36.103757;120.393467,36.102533;120.393500,36.102233;120.393567,36.101700;120.393617,36.101150;120.393767,36.099717;120.393833,36.099033;120.394017,36.097117;120.393933,36.094917;120.393333,36.094767;120.392983,36.095267;120.393133,36.096017;120.393283,36.096233;120.393467,36.096383;120.393717,36.096500;120.396017,36.097683;120.398333,36.098983;120.398950,36.099333;120.400300,36.099950;120.400533,36.099733;120.400567,36.099700;120.400683,36.099700;120.400800,36.099767;120.401350,36.099783;120.401517,36.099567;120.401450,36.099217;120.401475,36.099207;120.401517,36.099200;120.401583,36.099367;120.401400,36.099650;120.401267,36.099817;120.401283,36.099817;120.401267,36.099817;120.401283,36.099800;120.401267,36.099817;120.400800,36.099667;120.400383,36.100067;120.400500,36.100133;120.400833,36.100333;120.402533,36.101350;120.404383,36.102433;120.404500,36.102500;120.404517,36.102508;120.404550,36.102483;120.404750,36.102567;120.405017,36.102717;120.405117,36.102783;120.405967,36.103267;120.407283,36.103933;120.407500,36.104017;120.407650,36.104083;120.407983,36.104217;120.408450,36.104350;120.408533,36.104367;120.409383,36.104550;120.409817,36.104650;120.411450,36.104900;120.412267,36.105017;120.413233,36.105167;120.413450,36.105200;120.415517,36.105500;120.416500,36.105667;120.416533,36.105700;120.416517,36.105700;120.416520,36.105708;120.416517,36.105700;120.417183,36.105800;120.417283,36.105817;120.419033,36.106083;120.419583,36.106167;120.421633,36.106733;120.421900,36.106867;120.422367,36.107100;120.422450,36.107133;120.423733,36.107917;120.424950,36.108617;120.425867,36.109083;120.427083,36.109583;120.427233,36.109650;120.427200,36.109650;120.427200,36.109667;120.427267,36.109667;120.427917,36.109950;120.428283,36.110117;120.428733,36.110300;120.428827,36.110338;120.429150,36.110450;120.429150,36.110450;120.429133,36.110450;120.429133,36.110450;120.429150,36.110433;120.429517,36.110550;120.430200,36.110817;120.430333,36.110883;120.430400,36.110917;120.430667,36.111033;120.430950,36.111150;120.432167,36.111683;120.434683,36.112717;120.436733,36.113433;120.437667,36.113367;120.440333,36.112883;120.440600,36.112733;120.440667,36.112667;120.440783,36.112567;120.441000,36.112383;120.441057,36.112332;120.441117,36.112283;120.441167,36.112283;120.441317,36.112000;120.441617,36.111733;120.442067,36.111333;120.442533,36.110850;120.442700,36.110733;120.442733,36.110500;120.442600,36.110383;120.442550,36.110417;120.442602,36.110365;120.442600,36.110333;120.442567,36.110300;120.442700,36.110167;120.442767,36.110133;120.443233,36.109767;120.443450,36.109617;120.444233,36.108917;120.444733,36.108483;120.446798,36.106465;120.446783,36.106450;120.447017,36.106233;120.449183,36.104017;120.449583,36.103667;120.449600,36.103683;120.449617,36.103700;120.449633,36.103717;120.449633,36.103717;120.449817,36.103533;120.449933,36.103483;120.450367,36.103467;120.450800,36.103617;120.451433,36.103883;120.451550,36.103933;120.452233,36.104200;120.452517,36.104283;120.453383,36.104583;120.453490,36.104615;120.453483,36.104600;120.453750,36.104717;120.453750,36.104700;120.453750,36.104700;120.454133,36.104850;120.454517,36.105000;120.454600,36.105033;120.454700,36.105050;120.455017,36.105167;120.455050,36.105150;120.455050,36.105150;120.455050,36.105167;120.455100,36.105183;120.455583,36.105383;120.457167,36.105983;120.457883,36.106250;120.458267,36.106367;120.458383,36.106400;120.459900,36.107000;120.461033,36.107350;120.461250,36.107350;120.461617,36.107017;120.461667,36.106917;120.461717,36.106800;120.462173,36.105842;120.462300,36.105550;120.462483,36.105067;120.462500,36.105017;120.462500,36.104983;120.462650,36.104867;120.462917,36.104900;120.463050,36.104933;120.463550,36.105000;120.464000,36.105167;120.464317,36.105250;120.464467,36.105283;120.464533,36.105317;120.464567,36.105333;120.464683,36.105367;120.464833,36.105417;120.465345,36.105567;120.465500,36.105600;120.465667,36.105633;120.466017,36.105733;120.466083,36.105783;120.466133,36.105767;120.466467,36.105867;120.466633,36.105933;120.466667,36.105950;120.466817,36.105967;120.466850,36.105983;120.466967,36.106017;120.466983,36.106017;120.467048,36.106033;120.467033,36.106033;120.467033,36.106017;120.467033,36.106033;120.467033,36.106033;120.467233,36.106067;120.467233,36.106050;120.467233,36.106067;120.467217,36.106067;120.467250,36.106050;120.467250,36.106050;120.467267,36.106033;120.467267,36.106033;120.467267,36.106048;120.467267,36.106050;120.467267,36.106050;120.467267,36.106050;120.467267,36.106050;120.467250,36.106050;120.467250,36.106050;120.467317,36.106100;120.467483,36.106067;120.467500,36.106050;120.467500,36.106050;120.467517,36.105817;120.467500,36.105567;120.467167,36.105450;120.467175,36.105463;120.467167,36.105450;120.467167,36.105450;120.467167,36.105450;120.467167,36.105467;120.467168,36.105468;120.467167,36.105467;120.467158,36.105480;120.467450,36.105500;120.467433,36.106067;120.467383,36.106150;120.467117,36.106333;120.467017,36.106567;120.466367,36.108017;120.466133,36.108433;120.465917,36.108833;120.465800,36.109000;120.465547,36.109028;120.465367,36.108983;120.465067,36.108900;120.464783,36.108750;120.464333,36.108450;120.462250,36.107833;120.462050,36.107833;120.461550,36.107583;120.461200,36.107350;120.460900,36.107267;120.460700,36.107217;120.460417,36.107133;120.460333,36.107117;120.459733,36.106967;120.458950,36.106733;120.458850,36.106600;120.458683,36.106583;120.457833,36.106183;120.457483,36.106050;120.456667,36.105683;120.456167,36.105633;120.455200,36.105333;120.454650,36.105167;120.453850,36.104933;120.453515,36.104783;120.452733,36.104433;120.451500,36.104150;120.451400,36.104117;120.449967,36.103683;120.449667,36.103817;120.449300,36.104150;120.449300,36.104150;120.449150,36.104283;120.448717,36.104750;120.448017,36.105483;120.447500,36.106017;120.447417,36.106100;120.446683,36.106883;120.445517,36.108033;120.444717,36.108850;120.444050,36.109517;120.442133,36.111500;120.440233,36.113483;120.439683,36.114033;120.437800,36.115617;120.435200,36.117617;120.434717,36.118000;120.434197,36.118412;120.432533,36.119783;120.431300,36.120850;120.431033,36.121083;120.430083,36.122150;120.429517,36.122867;120.427933,36.125317;120.427900,36.125450;120.428233,36.125883;120.428783,36.125750;120.428883,36.125483;120.428750,36.125283;120.428267,36.125083;120.428067,36.125067;120.427600,36.125100;120.426283,36.125300;120.425200,36.125667;120.423667,36.126517;120.422600,36.127533;120.422300,36.127917;120.419867,36.131600;120.419083,36.132200;120.417183,36.133100;120.415317,36.133467;120.412733,36.133783;120.410600,36.134083;120.406317,36.134717;120.406117,36.134767;120.403650,36.135750;120.403100,36.136067;120.402138,36.136790;120.401650,36.137217;120.401017,36.137950;120.400950,36.138067;120.399833,36.140083;120.398750,36.141350;120.398600,36.141100;120.398433,36.141033;120.398017,36.140867;120.397850,36.140667;120.397400,36.140283;120.396617,36.139383;120.395983,36.138250;120.395900,36.138100;120.394000,36.134850;120.393683,36.134350;120.392433,36.132317;120.392217,36.132083;120.391867,36.131650;120.391867,36.131650;120.390017,36.129883;120.389617,36.129500;120.388033,36.128017;120.388033,36.128017;120.387900,36.127783;120.387767,36.127567;120.387878,36.127410;120.388117,36.127267;120.388300,36.127167;120.389183,36.126633;120.390300,36.125983;120.390900,36.125650;120.391717,36.125133;120.391717,36.125067;120.391417,36.124750;120.391350,36.124683;120.390650,36.123950;120.389650,36.122883;120.389600,36.122800;120.389583,36.122683;120.389500,36.121933;120.389517,36.121833;120.389417,36.120567;120.389333,36.119467;120.389000,36.119400;120.388750,36.119417;120.388633,36.119417;120.388517,36.119417;120.386583,36.119417;120.382940,36.122485;120.382950,36.122467;120.382900,36.122467;120.382900,36.122467;120.382900,36.122467;120.382883,36.122467;120.382898,36.122477;120.382883,36.122467;120.382892,36.122485\",\"avgOilSpend\":\"0.00\",\"endLocate\":\"山东省青岛市市北区河西街道重庆南路155号;距重庆南路178号青岛市殡葬管理所西北162米; \",\"carPassedTime\":\"00小时00分钟00秒\",\"highestSpeed\":\"89.0\",\"endTime\":\"2016-05-12 14:29:42\",\"km\":\"40.67\"}";
                pts.clear();
                ArrayList<TravelDetailItemEntity> listAll = new ArrayList<TravelDetailItemEntity>(); //mDBManager
                JSONObject result1 = JsonUtil.parseObject(str);
                if (TextUtils.isEmpty(result1.get("startTime").toString())) {
                    Toast.makeText(LocationServerActivity.this, "今日暂无轨迹数据!", Toast.LENGTH_SHORT).show();
                    return;
                }

                listAll = addlist(listAll, result1.get("coor").toString());//加载坐标数据
                for (int j = 0; j < listAll.size(); j++) {
                    TravelDetailItemEntity item = listAll.get(j);
                    double posWei = Double.valueOf(item.getPosWei());
                    double posJing = Double.valueOf(item.getPosJing());
                    DPoint latLng = new DPoint(posJing, posWei);
                    if (j == 0) {
                        startLatLng = item;
                    } else if (j == listAll.size() - 1) {
                        endlaLatLng = item;
                    }
                    //坐标转换
                    try {
                        pts.add(converter.coord(latLng).convert());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                //地图绘制方法
                mMapView.drivingRoute(pts);
                //从服务器端获取数据 显示到页面
                startTime1.setText("" + result1.get("startTime"));
                overTime1.setText("" + result1.get("endTime"));
                if (!result1.get("endTime").toString().equals("00小时00分钟00秒")) {
                    overTime1.setText("" + result1.get("endTime"));
                } else {
                    overTime1.setText("-");
                }
                runMileage1.setText("" + result1.get("km") + "公里");
                highestSpeed1.setText("" + result1.get("highestSpeed") + "公里/小时");
                mean1.setText("-");
                startLocation.setText("" + result1.get("startLocate").toString().split(";")[0]);
                startLocation1.setText("" + result1.get("endLocate").toString().split(";")[0]);
                isjiekou = true;
                break;
        }
    }

    private ArrayList<TravelDetailItemEntity> addlist(ArrayList<TravelDetailItemEntity> list, String temp) {
        ArrayList<TravelDetailItemEntity> list_all = list;
        String[] str = temp.split(";");//通过","进行截取操作 获取经度和纬度
        for (int i = 0; i < str.length; i++) {
            try {
                //构建精度维度
                TravelDetailItemEntity tdiemod = new TravelDetailItemEntity();
                tdiemod.setTrkId((i + 1) + "");
                tdiemod.setPosWei(str[i].split(",")[0]);
                tdiemod.setPosJing(str[i].split(",")[1]);
                list_all.add(tdiemod);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        return list_all;
    }

    public void setMargins(View view, int bottom) {
        if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
            ViewGroup.MarginLayoutParams p = (ViewGroup.MarginLayoutParams) view.getLayoutParams();
            p.bottomMargin = bottom;
            view.requestLayout();
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        //在activity执行onDestroy时执行mMapView.onDestroy(), 实现地图生命周期管理
        mMapView.onDestroy();
    }

    @Override
    protected void onResume() {
        super.onResume();
        //在activity执行onResume时执行mMapView.onResume ()，实现地图生命周期管理
        mMapView.onResume();

        rl_nav.setVisibility(View.VISIBLE);
        ib_back.setVisibility(View.VISIBLE);
        ib_right.setVisibility(View.GONE);
        btn_title.setText("位置服务");
    }

    @Override
    protected void onPause() {
        super.onPause();
        //在activity执行onPause时执行mMapView.onPause ()，实现地图生命周期管理
        mMapView.onPause();
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        //在activity执行onSaveInstanceState时执行mMapView.onSaveInstanceState (outState)，实现地图生命周期管理
        mMapView.onSaveInstanceState(outState);
    }
}
